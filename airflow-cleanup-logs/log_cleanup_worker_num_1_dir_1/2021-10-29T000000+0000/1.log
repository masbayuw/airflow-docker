[2021-10-30 12:56:58,876] {taskinstance.py:851} INFO - Dependencies all met for <TaskInstance: airflow-cleanup-logs.log_cleanup_worker_num_1_dir_1 2021-10-29T00:00:00+00:00 [queued]>
[2021-10-30 12:56:58,944] {taskinstance.py:851} INFO - Dependencies all met for <TaskInstance: airflow-cleanup-logs.log_cleanup_worker_num_1_dir_1 2021-10-29T00:00:00+00:00 [queued]>
[2021-10-30 12:56:58,946] {taskinstance.py:1042} INFO - 
--------------------------------------------------------------------------------
[2021-10-30 12:56:58,947] {taskinstance.py:1043} INFO - Starting attempt 1 of 2
[2021-10-30 12:56:58,951] {taskinstance.py:1044} INFO - 
--------------------------------------------------------------------------------
[2021-10-30 12:56:58,996] {taskinstance.py:1063} INFO - Executing <Task(BashOperator): log_cleanup_worker_num_1_dir_1> on 2021-10-29T00:00:00+00:00
[2021-10-30 12:56:59,010] {standard_task_runner.py:52} INFO - Started process 152 to run task
[2021-10-30 12:56:59,068] {standard_task_runner.py:76} INFO - Running: ['airflow', 'tasks', 'run', 'airflow-cleanup-logs', 'log_cleanup_worker_num_1_dir_1', '2021-10-29T00:00:00+00:00', '--job-id', '41621', '--pool', 'default_pool', '--raw', '--subdir', 'DAGS_FOLDER/airflow-cleanup-logs.py', '--cfg-path', '/tmp/tmpftj5mzpg', '--error-file', '/tmp/tmp2us1k7ti']
[2021-10-30 12:56:59,082] {standard_task_runner.py:77} INFO - Job 41621: Subtask log_cleanup_worker_num_1_dir_1
[2021-10-30 12:56:59,375] {logging_mixin.py:104} INFO - Running <TaskInstance: airflow-cleanup-logs.log_cleanup_worker_num_1_dir_1 2021-10-29T00:00:00+00:00 [running]> on host f8e9f518f089
[2021-10-30 12:56:59,675] {taskinstance.py:1257} INFO - Exporting the following env vars:
AIRFLOW_CTX_DAG_EMAIL=bwiratmo91@gmail.com
AIRFLOW_CTX_DAG_OWNER=bayu
AIRFLOW_CTX_DAG_ID=airflow-cleanup-logs
AIRFLOW_CTX_TASK_ID=log_cleanup_worker_num_1_dir_1
AIRFLOW_CTX_EXECUTION_DATE=2021-10-29T00:00:00+00:00
AIRFLOW_CTX_DAG_RUN_ID=scheduled__2021-10-29T00:00:00+00:00
[2021-10-30 12:56:59,683] {bash.py:135} INFO - Tmp dir root location: 
 /tmp
[2021-10-30 12:56:59,702] {bash.py:158} INFO - Running command: 

echo "Getting Configurations..."
BASE_LOG_FOLDER="/opt/airflow/logs/scheduler"
WORKER_SLEEP_TIME="3"

sleep ${WORKER_SLEEP_TIME}s

MAX_LOG_AGE_IN_DAYS=""
if [ "${MAX_LOG_AGE_IN_DAYS}" == "" ]; then
    echo "maxLogAgeInDays conf variable isn't included. Using Default '0'."
    MAX_LOG_AGE_IN_DAYS='0'
fi
ENABLE_DELETE=true
echo "Finished Getting Configurations"
echo ""

echo "Configurations:"
echo "BASE_LOG_FOLDER:      '${BASE_LOG_FOLDER}'"
echo "MAX_LOG_AGE_IN_DAYS:  '${MAX_LOG_AGE_IN_DAYS}'"
echo "ENABLE_DELETE:        '${ENABLE_DELETE}'"

cleanup() {
    echo "Executing Find Statement: $1"
    FILES_MARKED_FOR_DELETE=`eval $1`
    echo "Process will be Deleting the following File(s)/Directory(s):"
    echo "${FILES_MARKED_FOR_DELETE}"
    echo "Process will be Deleting `echo "${FILES_MARKED_FOR_DELETE}" |     grep -v '^$' | wc -l` File(s)/Directory(s)"         # "grep -v '^$'" - removes empty lines.
    # "wc -l" - Counts the number of lines
    echo ""
    if [ "${ENABLE_DELETE}" == "true" ];
    then
        if [ "${FILES_MARKED_FOR_DELETE}" != "" ];
        then
            echo "Executing Delete Statement: $2"
            eval $2
            DELETE_STMT_EXIT_CODE=$?
            if [ "${DELETE_STMT_EXIT_CODE}" != "0" ]; then
                echo "Delete process failed with exit code                     '${DELETE_STMT_EXIT_CODE}'"

                echo "Removing lock file..."
                rm -f /tmp/airflow_log_cleanup_worker.lock
                if [ "${REMOVE_LOCK_FILE_EXIT_CODE}" != "0" ]; then
                    echo "Error removing the lock file.                     Check file permissions.                    To re-run the DAG, ensure that the lock file has been                     deleted (/tmp/airflow_log_cleanup_worker.lock)."
                    exit ${REMOVE_LOCK_FILE_EXIT_CODE}
                fi
                exit ${DELETE_STMT_EXIT_CODE}
            fi
        else
            echo "WARN: No File(s)/Directory(s) to Delete"
        fi
    else
        echo "WARN: You're opted to skip deleting the File(s)/Directory(s)!!!"
    fi
}


if [ ! -f /tmp/airflow_log_cleanup_worker.lock ]; then

    echo "Lock file not found on this node!     Creating it to prevent collisions..."
    touch /tmp/airflow_log_cleanup_worker.lock
    CREATE_LOCK_FILE_EXIT_CODE=$?
    if [ "${CREATE_LOCK_FILE_EXIT_CODE}" != "0" ]; then
        echo "Error creating the lock file.         Check if the airflow user can create files under tmp directory.         Exiting..."
        exit ${CREATE_LOCK_FILE_EXIT_CODE}
    fi

    echo ""
    echo "Running Cleanup Process..."

    FIND_STATEMENT="find ${BASE_LOG_FOLDER}/*/* -type f -mtime      +${MAX_LOG_AGE_IN_DAYS}"
    DELETE_STMT="${FIND_STATEMENT} -exec rm -f {} \;"

    cleanup "${FIND_STATEMENT}" "${DELETE_STMT}"
    CLEANUP_EXIT_CODE=$?

    FIND_STATEMENT="find ${BASE_LOG_FOLDER}/*/* -type d -empty"
    DELETE_STMT="${FIND_STATEMENT} -prune -exec rm -rf {} \;"

    cleanup "${FIND_STATEMENT}" "${DELETE_STMT}"
    CLEANUP_EXIT_CODE=$?

    FIND_STATEMENT="find ${BASE_LOG_FOLDER}/* -type d -empty"
    DELETE_STMT="${FIND_STATEMENT} -prune -exec rm -rf {} \;"

    cleanup "${FIND_STATEMENT}" "${DELETE_STMT}"
    CLEANUP_EXIT_CODE=$?

    echo "Finished Running Cleanup Process"

    echo "Deleting lock file..."
    rm -f /tmp/airflow_log_cleanup_worker.lock
    REMOVE_LOCK_FILE_EXIT_CODE=$?
    if [ "${REMOVE_LOCK_FILE_EXIT_CODE}" != "0" ]; then
        echo "Error removing the lock file. Check file permissions. To re-run the DAG, ensure that the lock file has been deleted (/tmp/airflow_log_cleanup_worker.lock)."
        exit ${REMOVE_LOCK_FILE_EXIT_CODE}
    fi

else
    echo "Another task is already deleting logs on this worker node.     Skipping it!"
    echo "If you believe you're receiving this message in error, kindly check     if /tmp/airflow_log_cleanup_worker.lock exists and delete it."
    exit 0
fi

[2021-10-30 12:56:59,763] {bash.py:169} INFO - Output:
[2021-10-30 12:56:59,763] {bash.py:173} INFO - Getting Configurations...
[2021-10-30 12:57:02,774] {bash.py:173} INFO - maxLogAgeInDays conf variable isn't included. Using Default '0'.
[2021-10-30 12:57:02,775] {bash.py:173} INFO - Finished Getting Configurations
[2021-10-30 12:57:02,775] {bash.py:173} INFO - 
[2021-10-30 12:57:02,775] {bash.py:173} INFO - Configurations:
[2021-10-30 12:57:02,776] {bash.py:173} INFO - BASE_LOG_FOLDER:      '/opt/airflow/logs/scheduler'
[2021-10-30 12:57:02,777] {bash.py:173} INFO - MAX_LOG_AGE_IN_DAYS:  '0'
[2021-10-30 12:57:02,777] {bash.py:173} INFO - ENABLE_DELETE:        'true'
[2021-10-30 12:57:02,777] {bash.py:173} INFO - Lock file not found on this node!     Creating it to prevent collisions...
[2021-10-30 12:57:02,781] {bash.py:173} INFO - 
[2021-10-30 12:57:02,784] {bash.py:173} INFO - Running Cleanup Process...
[2021-10-30 12:57:02,785] {bash.py:173} INFO - Executing Find Statement: find /opt/airflow/logs/scheduler/*/* -type f -mtime      +0
[2021-10-30 12:57:04,824] {bash.py:173} INFO - Process will be Deleting the following File(s)/Directory(s):
[2021-10-30 12:57:04,839] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/EmailOperator.py.log
[2021-10-30 12:57:04,851] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/airflow-cleanup-logs-ssh.py.log
[2021-10-30 12:57:04,851] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/airflow-cleanup-logs.py.log
[2021-10-30 12:57:04,851] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/my_test_dag.py.log
[2021-10-30 12:57:04,864] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_bash_operator.py.log
[2021-10-30 12:57:04,865] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_branch_operator.py.log
[2021-10-30 12:57:04,865] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_branch_python_dop_operator_3.py.log
[2021-10-30 12:57:04,865] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_complex.py.log
[2021-10-30 12:57:04,866] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_dag_decorator.py.log
[2021-10-30 12:57:04,866] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_external_task_marker_dag.py.log
[2021-10-30 12:57:04,866] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_kubernetes_executor.py.log
[2021-10-30 12:57:04,867] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_kubernetes_executor_config.py.log
[2021-10-30 12:57:04,867] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_latest_only.py.log
[2021-10-30 12:57:04,867] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_latest_only_with_trigger.py.log
[2021-10-30 12:57:04,868] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_nested_branch_dag.py.log
[2021-10-30 12:57:04,868] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_passing_params_via_test_command.py.log
[2021-10-30 12:57:04,868] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_python_operator.py.log
[2021-10-30 12:57:04,868] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_short_circuit_operator.py.log
[2021-10-30 12:57:04,868] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_skip_dag.py.log
[2021-10-30 12:57:04,869] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_subdag_operator.py.log
[2021-10-30 12:57:04,869] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_task_group.py.log
[2021-10-30 12:57:04,869] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_trigger_controller_dag.py.log
[2021-10-30 12:57:04,891] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_trigger_target_dag.py.log
[2021-10-30 12:57:04,915] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_xcom.py.log
[2021-10-30 12:57:04,974] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/example_xcomargs.py.log
[2021-10-30 12:57:05,023] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/subdags/subdag.py.log
[2021-10-30 12:57:05,024] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/test_utils.py.log
[2021-10-30 12:57:05,025] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/tutorial.py.log
[2021-10-30 12:57:05,026] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/tutorial_etl_dag.py.log
[2021-10-30 12:57:05,026] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/tutorial_taskflow_api_etl.py.log
[2021-10-30 12:57:05,040] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/tutorial.py.log
[2021-10-30 12:57:05,041] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/user_processing.py.log
[2021-10-30 12:57:05,041] {bash.py:173} INFO - Process will be Deleting 32 File(s)/Directory(s)
[2021-10-30 12:57:05,042] {bash.py:173} INFO - 
[2021-10-30 12:57:05,043] {bash.py:173} INFO - Executing Delete Statement: find /opt/airflow/logs/scheduler/*/* -type f -mtime      +0 -exec rm -f {} \;
[2021-10-30 12:57:10,758] {bash.py:173} INFO - Executing Find Statement: find /opt/airflow/logs/scheduler/*/* -type d -empty
[2021-10-30 12:57:11,665] {bash.py:173} INFO - Process will be Deleting the following File(s)/Directory(s):
[2021-10-30 12:57:11,676] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags/subdags
[2021-10-30 12:57:11,716] {bash.py:173} INFO - Process will be Deleting 1 File(s)/Directory(s)
[2021-10-30 12:57:11,731] {bash.py:173} INFO - 
[2021-10-30 12:57:11,747] {bash.py:173} INFO - Executing Delete Statement: find /opt/airflow/logs/scheduler/*/* -type d -empty -prune -exec rm -rf {} \;
[2021-10-30 12:57:13,133] {bash.py:173} INFO - Executing Find Statement: find /opt/airflow/logs/scheduler/* -type d -empty
[2021-10-30 12:57:13,499] {bash.py:173} INFO - Process will be Deleting the following File(s)/Directory(s):
[2021-10-30 12:57:13,508] {bash.py:173} INFO - /opt/airflow/logs/scheduler/2021-10-28/native_dags/example_dags
[2021-10-30 12:57:13,542] {bash.py:173} INFO - Process will be Deleting 1 File(s)/Directory(s)
[2021-10-30 12:57:13,543] {bash.py:173} INFO - 
[2021-10-30 12:57:13,543] {bash.py:173} INFO - Executing Delete Statement: find /opt/airflow/logs/scheduler/* -type d -empty -prune -exec rm -rf {} \;
[2021-10-30 12:57:13,897] {bash.py:173} INFO - Finished Running Cleanup Process
[2021-10-30 12:57:13,899] {bash.py:173} INFO - Deleting lock file...
[2021-10-30 12:57:13,909] {bash.py:177} INFO - Command exited with return code 0
[2021-10-30 12:57:14,218] {taskinstance.py:1166} INFO - Marking task as SUCCESS. dag_id=airflow-cleanup-logs, task_id=log_cleanup_worker_num_1_dir_1, execution_date=20211029T000000, start_date=20211030T125658, end_date=20211030T125714
[2021-10-30 12:57:14,395] {taskinstance.py:1220} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2021-10-30 12:57:14,417] {local_task_job.py:146} INFO - Task exited with return code 0
